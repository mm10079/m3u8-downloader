from selenium import webdriver
import requests
import threading
import time

from src.app_types import common_types

class cookies_keepalive:
    def __init__(self, driver: webdriver.Chrome, cookies_path):
        self.driver = driver
        self.result_path = cookies_path
        self.power = True

    def write(self):
        print(f'更新cookies文件:\"{self.result_path}\"')
        cookies = self.driver.get_cookies()
        with open(self.result_path, 'w') as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# This file was generated by Zan_Live_Archive_Downloader\n")
            for cookie in cookies:
                expiry = cookie.get('expiry', 0)
                # 格式化每个cookie并写入文件
                domain: str = cookie.get('domain', '')
                f.write("{}\t{}\t{}\t{}\t{}\t{}\t{}\n".format(
                    cookie['domain'], 
                    'TRUE' if domain.startswith('.') else 'FALSE', 
                    cookie['path'], 
                    'TRUE' if cookie['secure'] else 'FALSE', 
                    expiry, 
                    cookie['name'], 
                    cookie['value'])
                )

    def keep_upload_cookies(self):
        old_cookies = None
        while self.power:
            new_cookies = self.driver.get_cookies()
            if new_cookies != old_cookies:
                self.write()
                old_cookies = new_cookies
            time.sleep(3)

    def run_cookies_thread(self):
        self.thread = threading.Thread(target=self.keep_upload_cookies)
        self.thread.start()

    def lock(self):
        self.power = True

    def unlock(self):
        self.power = False
        

# 解析 Netscape HTTP Cookie File
def parse_netscape_to_dict(cookie_file_path):
    cookies = []
    with open(cookie_file_path, 'r') as file:
        for line in file:
            if line.startswith("#") or not line.strip():
                continue
            domain, flag, path, secure, expiration, name, value = line.strip().split('\t')
            cookie = {
                'domain': domain,
                'name': name,
                'value': value,
                'path': path,
                'secure': secure.lower() == 'true',
                'expires': int(expiration) if expiration.isdigit() else None
            }
            cookies.append(cookie)
    return cookies

def load_cookies_to_dict(cookies: common_types.CookieType) -> dict|None:
    '''更新 cookies，如果為 WebDriver 則多次更新'''
    if isinstance(cookies, webdriver.Chrome):# 取得 Selenium 的 cookies
        result = {cookie['name']: cookie['value'] for cookie in cookies.get_cookies()}
    elif isinstance(cookies, str):# 取得本地檔案的 cookies
        try:
            cookies_list = parse_netscape_to_dict(cookies)
            result = {cookie['name']: cookie['value'] for cookie in cookies_list}
        except:
            result = None
    elif isinstance(cookies, dict):
        result = cookies
    else:
        result = None
    return result

def update_session(cookies: common_types.CookieType, session = None) -> requests.Session:
    if cookies:
        session = requests.Session()
        cookies_dict = load_cookies_to_dict(cookies)
        if cookies_dict:
            session.cookies.update(cookies_dict)
    elif not session:
        session = requests.Session()
    return session